{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAGtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCChBG,EATK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC7B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAHY,kBAKZA,EAAKC,KAAI,SAAAC,GAAQ,IAAD,EACnB,MAAO,CACHf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,SATvB,2CAAH,sDCyBLgB,EAtBC,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SACd,ECDwB,SAACA,GACzB,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNM,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OATAC,qBAAU,WACNhB,EAAQC,GAAUgB,MAAK,SAAAP,GACnBK,EAAS,CACLR,KAAMG,EACNG,SAAS,SAGlB,CAACZ,IAEGa,EDfyBI,CAAajB,GAAhCS,EAAb,EAAOH,KAAcM,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIhB,UAAU,oCAAd,SAAmDI,IAElDY,GAAW,mBAAGhB,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEQa,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIf,aEmBtByB,EA/BM,WAEjB,MAAoCvC,mBAAS,CAAC,cAA9C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAQA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAEQyC,EAAWZ,KAAI,SAAAP,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCpBjCoB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.64269e80.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Handle para poder cambiar el estado de inputValue\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // Previene el evento por default del formulario, en este caso que no recargue la pÃ¡gina al enviar el formulario\r\n        e.preventDefault();\r\n\r\n        // Llamar la propiedad setCategories del componente padre GifExpertApp\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n\r\n            // Limpiar el input al enviar el formulario\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=gOrIoBdvHeKsTQqOu8XnLe60FI4Q2Yx5`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n}","import GifGridItem from \"./GifGridItem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({category}) => {\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Hook para que la funcion getGif() solo se ejecute una vez a pesar de haber cambios en el estado del componente\r\n    useEffect(() => {\r\n        getGifs(category).then(images => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            })\r\n        });\r\n    }, [category]);\r\n\r\n    return state; // {data: [], loading: true}\r\n}","import {useState} from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // Agregar elemento al array con useState\r\n    /*const handleApp = () => {\r\n        // setCategories([...categories, 'Anime']);\r\n        setCategories(cats => [...cats, 'Anime']);\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from \"./GifExpertApp\";\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}